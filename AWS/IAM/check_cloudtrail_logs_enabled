def check_cloudtrail_logs_enabled(client):
    """
    Checks if CloudTrail logs are enabled for the account.

    Returns:
        dict: A summary of the findings.
    """
    print("----- Checking if CloudTrail logs are enabled at the account level -----")
    try:
        cloudtrail_client = client
        trails = cloudtrail_client.describe_trails()

        if not trails['trailList']:
            return {"status": "(-) No CloudTrail trails found."}
        
        logs_status = []

        for trail in trails['trailList']:
            trail_name = trail['Name']
            try:
                # Check logging status for the trail
                status = cloudtrail_client.get_trail_status(Name=trail_name)
                if status.get('IsLogging', False):
                    logs_status.append(f"(+) CloudTrail logging is enabled for trail: {trail_name}")
                else:
                    logs_status.append(f"(-) CloudTrail logging is NOT enabled for trail: {trail_name}")
            except cloudtrail_client.exceptions.TrailNotFoundException:
                logs_status.append(f"(-) Trail not found: {trail_name}")
        
        # Prepare the result as a dictionary
        if logs_status:
            result = {
                "status": "\n".join(logs_status)
            }
        else:
            result = {
                "status": "(-) No CloudTrail trails with logging enabled found."
            }

        return result

    except Exception as e:
        return {"error": str(e)}
